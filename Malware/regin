rule win_regin_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-01-25"
        version = "1"
        description = "Detects win.regin."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.regin"
        malpedia_rule_date = "20230124"
        malpedia_hash = "2ee0eebba83dce3d019a90519f2f972c0fcf9686"
        malpedia_version = "20230125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 49 8363f000 48 8d0504230000 49 8943d8 }
            // n = 6, score = 100
            //   49                   | dec                 ecx
            //   8363f000             | and                 dword ptr [ebx - 0x10], 0
            //   48                   | dec                 eax
            //   8d0504230000         | lea                 eax, [0x2304]
            //   49                   | dec                 ecx
            //   8943d8               | mov                 dword ptr [ebx - 0x28], eax

        $sequence_1 = { 48 89442438 b800210000 c7442430204e0000 89442428 }
            // n = 5, score = 100
            //   48                   | dec                 eax
            //   89442438             | mov                 dword ptr [esp + 0x38], eax
            //   b800210000           | mov                 eax, 0x2100
            //   c7442430204e0000     | mov                 dword ptr [esp + 0x30], 0x4e20
            //   89442428             | mov                 dword ptr [esp + 0x28], eax

        $sequence_2 = { 85c0 740c 8b05???????? 39442460 7405 }
            // n = 5, score = 100
            //   85c0                 | test                eax, eax
            //   740c                 | je                  0xe
            //   8b05????????         |
            //   39442460             | cmp                 dword ptr [esp + 0x60], eax
            //   7405                 | je                  7

        $sequence_3 = { c1e802 41 ffc0 48 8d4c2470 41 }
            // n = 6, score = 100
            //   c1e802               | shr                 eax, 2
            //   41                   | inc                 ecx
            //   ffc0                 | inc                 eax
            //   48                   | dec                 eax
            //   8d4c2470             | lea                 ecx, [esp + 0x70]
            //   41                   | inc                 ecx

        $sequence_4 = { 8d05e7060000 4c 8bce 8bd5 }
            // n = 4, score = 100
            //   8d05e7060000         | lea                 eax, [0x6e7]
            //   4c                   | dec                 esp
            //   8bce                 | mov                 ecx, esi
            //   8bd5                 | mov                 edx, ebp

        $sequence_5 = { 56 57 41 54 48 83ec38 33db }
            // n = 7, score = 100
            //   56                   | push                esi
            //   57                   | push                edi
            //   41                   | inc                 ecx
            //   54                   | push                esp
            //   48                   | dec                 eax
            //   83ec38               | sub                 esp, 0x38
            //   33db                 | xor                 ebx, ebx

        $sequence_6 = { 33c0 48 83c428 c3 48 83ec28 33c9 }
            // n = 7, score = 100
            //   33c0                 | xor                 eax, eax
            //   48                   | dec                 eax
            //   83c428               | add                 esp, 0x28
            //   c3                   | ret
            //   48                   | dec                 eax
            //   83ec28               | sub                 esp, 0x28
            //   33c9                 | xor                 ecx, ecx

        $sequence_7 = { 0f45df 8bc3 48 8b5c2448 }
            // n = 4, score = 100
            //   0f45df               | cmovne              ebx, edi
            //   8bc3                 | mov                 eax, ebx
            //   48                   | dec                 eax
            //   8b5c2448             | mov                 ebx, dword ptr [esp + 0x48]

        $sequence_8 = { 84c0 44 8d7304 0f45f8 8d4302 44 84c0 }
            // n = 7, score = 100
            //   84c0                 | test                al, al
            //   44                   | inc                 esp
            //   8d7304               | lea                 esi, [ebx + 4]
            //   0f45f8               | cmovne              edi, eax
            //   8d4302               | lea                 eax, [ebx + 2]
            //   44                   | inc                 esp
            //   84c0                 | test                al, al

        $sequence_9 = { eb05 bb01000000 33d2 41 }
            // n = 4, score = 100
            //   eb05                 | jmp                 7
            //   bb01000000           | mov                 ebx, 1
            //   33d2                 | xor                 edx, edx
            //   41                   | inc                 ecx

    condition:
        7 of them and filesize < 49152
}
